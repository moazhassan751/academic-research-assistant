"""
Simple Export Manager for Academic Research Assistant
Provides basic export functionality as fallback
"""

import json
import os
from pathlib import Path
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class SimpleExportManager:
    """Simple export manager with basic functionality"""
    
    def __init__(self):
        self.supported_formats = ["txt", "markdown", "html", "json", "csv"]
    
    def export_draft(self, content: str, output_path: str, format_type: str) -> bool:
        """
        Export draft content to specified format
        
        Args:
            content: Content to export
            output_path: Path without extension
            format_type: Format to export to
            
        Returns:
            bool: Success status
        """
        try:
            if format_type.lower() == 'txt':
                return self._export_txt(content, output_path)
            elif format_type.lower() == 'markdown':
                return self._export_markdown(content, output_path)
            elif format_type.lower() == 'html':
                return self._export_html(content, output_path)
            elif format_type.lower() == 'json':
                return self._export_json(content, output_path)
            else:
                # Default to text
                return self._export_txt(content, output_path)
                
        except Exception as e:
            logger.error(f"Export failed: {e}")
            return False
    
    def _export_txt(self, content: str, output_path: str) -> bool:
        """Export as plain text"""
        try:
            with open(f"{output_path}.txt", 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        except Exception as e:
            logger.error(f"Text export failed: {e}")
            return False
    
    def _export_markdown(self, content: str, output_path: str) -> bool:
        """Export as markdown"""
        try:
            with open(f"{output_path}.md", 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        except Exception as e:
            logger.error(f"Markdown export failed: {e}")
            return False
    
    def _export_html(self, content: str, output_path: str) -> bool:
        """Export as HTML"""
        try:
            html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Research Export</title>
    <style>
        body {{
            font-family: 'Georgia', serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 40px 20px;
            line-height: 1.6;
            color: #333;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
            margin-top: 30px;
        }}
        pre {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
        }}
        .timestamp {{
            color: #6c757d;
            font-size: 0.9em;
            border-top: 1px solid #dee2e6;
            padding-top: 20px;
            margin-top: 40px;
        }}
    </style>
</head>
<body>
    <h1>Research Export</h1>
    <pre>{content}</pre>
    <div class="timestamp">
        Exported on: {Path(output_path).name}<br>
        Generated by Academic Research Assistant
    </div>
</body>
</html>"""
            
            with open(f"{output_path}.html", 'w', encoding='utf-8') as f:
                f.write(html_content)
            return True
        except Exception as e:
            logger.error(f"HTML export failed: {e}")
            return False
    
    def _export_json(self, content: str, output_path: str) -> bool:
        """Export as JSON"""
        try:
            json_data = {
                "content": content,
                "export_timestamp": str(Path(output_path).name),
                "format": "json",
                "source": "Academic Research Assistant"
            }
            
            with open(f"{output_path}.json", 'w', encoding='utf-8') as f:
                json.dump(json_data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            logger.error(f"JSON export failed: {e}")
            return False
    
    def export_bibliography(self, references: list, output_path: str, format_type: str = "bibtex") -> bool:
        """
        Export bibliography in specified format
        
        Args:
            references: List of reference objects
            output_path: Path without extension
            format_type: Format to export to
            
        Returns:
            bool: Success status
        """
        try:
            if format_type.lower() == 'bibtex':
                return self._export_bibtex(references, output_path)
            elif format_type.lower() == 'csv':
                return self._export_csv(references, output_path)
            elif format_type.lower() == 'json':
                return self._export_json_bib(references, output_path)
            else:
                return self._export_txt_bib(references, output_path)
                
        except Exception as e:
            logger.error(f"Bibliography export failed: {e}")
            return False
    
    def _export_bibtex(self, references: list, output_path: str) -> bool:
        """Export bibliography as BibTeX"""
        try:
            bibtex_content = ""
            for i, ref in enumerate(references, 1):
                # Simple BibTeX format
                title = getattr(ref, 'title', f'Reference {i}')
                authors = getattr(ref, 'authors', ['Unknown'])
                year = getattr(ref, 'year', 'Unknown')
                source = getattr(ref, 'source', 'Unknown')
                
                author_str = " and ".join(authors) if isinstance(authors, list) else str(authors)
                
                bibtex_content += f"""@article{{ref{i},
    title={{{title}}},
    author={{{author_str}}},
    year={{{year}}},
    journal={{{source}}}
}}

"""
            
            with open(f"{output_path}.bib", 'w', encoding='utf-8') as f:
                f.write(bibtex_content)
            return True
        except Exception as e:
            logger.error(f"BibTeX export failed: {e}")
            return False
    
    def _export_csv(self, references: list, output_path: str) -> bool:
        """Export bibliography as CSV"""
        try:
            import csv
            
            with open(f"{output_path}.csv", 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(['Title', 'Authors', 'Year', 'Source', 'URL'])
                
                for ref in references:
                    title = getattr(ref, 'title', 'Unknown')
                    authors = getattr(ref, 'authors', ['Unknown'])
                    year = getattr(ref, 'year', 'Unknown')
                    source = getattr(ref, 'source', 'Unknown')
                    url = getattr(ref, 'url', '')
                    
                    author_str = "; ".join(authors) if isinstance(authors, list) else str(authors)
                    writer.writerow([title, author_str, year, source, url])
            
            return True
        except Exception as e:
            logger.error(f"CSV export failed: {e}")
            return False
    
    def _export_json_bib(self, references: list, output_path: str) -> bool:
        """Export bibliography as JSON"""
        try:
            bib_data = []
            for ref in references:
                ref_dict = {
                    "title": getattr(ref, 'title', 'Unknown'),
                    "authors": getattr(ref, 'authors', ['Unknown']),
                    "year": getattr(ref, 'year', 'Unknown'),
                    "source": getattr(ref, 'source', 'Unknown'),
                    "url": getattr(ref, 'url', ''),
                    "citations": getattr(ref, 'citations', 0),
                    "abstract": getattr(ref, 'abstract', '')
                }
                bib_data.append(ref_dict)
            
            export_data = {
                "bibliography": bib_data,
                "export_timestamp": str(Path(output_path).name),
                "total_references": len(bib_data),
                "source": "Academic Research Assistant"
            }
            
            with open(f"{output_path}.json", 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            logger.error(f"JSON bibliography export failed: {e}")
            return False
    
    def _export_txt_bib(self, references: list, output_path: str) -> bool:
        """Export bibliography as plain text"""
        try:
            content = "BIBLIOGRAPHY\n" + "="*50 + "\n\n"
            
            for i, ref in enumerate(references, 1):
                title = getattr(ref, 'title', 'Unknown')
                authors = getattr(ref, 'authors', ['Unknown'])
                year = getattr(ref, 'year', 'Unknown')
                source = getattr(ref, 'source', 'Unknown')
                
                author_str = ", ".join(authors) if isinstance(authors, list) else str(authors)
                
                content += f"{i}. {title}\n"
                content += f"   Authors: {author_str}\n"
                content += f"   Year: {year}\n"
                content += f"   Source: {source}\n\n"
            
            with open(f"{output_path}.txt", 'w', encoding='utf-8') as f:
                f.write(content)
            return True
        except Exception as e:
            logger.error(f"Text bibliography export failed: {e}")
            return False

# Create global instance
export_manager = SimpleExportManager()
